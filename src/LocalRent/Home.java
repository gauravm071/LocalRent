/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LocalRent;

import net.proteanit.sql.DbUtils;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

/**
 *
 * @author sk995
 */
public class Home extends JFrame {
    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;

    /**
     * Creates new form Home
     */
    public Home() {
        super("Home");
        initComponents();
        conn = RentDatabase.connectDb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        homePanel = new JPanel();
        localRent = new JLabel();
        comboBox = new JComboBox();
        profileFace = new JLabel();
        homeClose = new JButton();
        greenPanel = new JPanel();
        invoiceIcon = new JLabel();
        invoiceDetails = new JLabel();
        bluePanel = new JPanel();
        houseDetails = new JLabel();
        houseIcon = new JLabel();
        brownPanel = new JPanel();
        roomIcon = new JLabel();
        jLabel1 = new JLabel();
        vacantRooms = new JLabel();
        yellowPanel = new JPanel();
        paymentDetails = new JLabel();
        paymentIcon = new JLabel();
        pinkPanel = new JPanel();
        outstandingIcon = new JLabel();
        outstandingDetails = new JLabel();
        outstandingLabel = new JLabel();
        outstandingAmount = new JLabel();
        olivePanel = new JPanel();
        tenantDetails = new JLabel();
        tenantIcon = new JLabel();
        lightPinkPanel = new JPanel();
        houseLabel = new JLabel();
        tenantLabel = new JLabel();
        paymentLabel = new JLabel();
        invoiceLabel = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        homePanel.setBackground(new Color(102, 0, 102));
        homePanel.setBorder(new SoftBevelBorder(BevelBorder.RAISED));

        localRent.setFont(new Font("Comic Sans MS", 1, 18)); // NOI18N
        localRent.setForeground(new Color(255, 204, 255));
        localRent.setText("Local Rent");

        comboBox.setBackground(new Color(255, 153, 153));
        comboBox.setFont(new Font("MV Boli", 1, 14)); // NOI18N
        comboBox.setForeground(new Color(255, 255, 255));
        comboBox.setMaximumRowCount(2);
        comboBox.setModel(new DefaultComboBoxModel(new String[] { "Update System", "Logout" }));
        comboBox.setToolTipText("update/logout");
        comboBox.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        comboBox.setCursor(new Cursor(Cursor.HAND_CURSOR));
        comboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });
        profileFace.setIcon(new ImageIcon("image\\man.png"));
        profileFace.setToolTipText("check your profile");
        homeClose.setBackground(new Color(255, 0, 51));
        homeClose.setFont(new Font("Tahoma", 1, 18)); // NOI18N
        homeClose.setForeground(new Color(255, 255, 255));
        homeClose.setText("X");
        homeClose.setToolTipText("close");
        homeClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                homeCloseActionPerformed(evt);
            }
        });

        greenPanel.setBackground(new Color(51, 255, 51));
        greenPanel.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 8));

        invoiceIcon.setFont(new Font("Tahoma", 1, 18)); // NOI18N
        invoiceIcon.setForeground(new Color(255, 255, 255));
        invoiceIcon.setIcon(new ImageIcon("image\\receipt1.png")); // NOI18N
        invoiceIcon.setText("      INVOICE");
        invoiceIcon.setToolTipText("download/print invoice");

        invoiceDetails.setFont(new Font("Comic Sans MS", 1, 14)); // NOI18N
        invoiceDetails.setForeground(new Color(255, 255, 255));
        invoiceDetails.setText("        view details");
        invoiceDetails.setToolTipText("download/print invoice");
        invoiceDetails.setCursor(new Cursor(Cursor.HAND_CURSOR));
        invoiceDetails.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                invoiceDetailsMouseClicked(evt);
            }
        });

        GroupLayout greenPanelLayout = new GroupLayout(greenPanel);
        greenPanel.setLayout(greenPanelLayout);
        greenPanelLayout.setHorizontalGroup(
            greenPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(invoiceIcon)
                .addContainerGap())
            .addComponent(invoiceDetails, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        greenPanelLayout.setVerticalGroup(
            greenPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, greenPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(invoiceIcon)
                .addGap(11, 11, 11)
                .addComponent(invoiceDetails, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        bluePanel.setBackground(new Color(51, 102, 255));
        bluePanel.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 8));

        houseDetails.setFont(new Font("Comic Sans MS", 1, 14)); // NOI18N
        houseDetails.setForeground(new Color(255, 255, 255));
        houseDetails.setText("        view details");
        houseDetails.setToolTipText("check house details");
        houseDetails.setCursor(new Cursor(Cursor.HAND_CURSOR));
        houseDetails.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                houseDetailsMouseClicked(evt);
            }
        });

        houseIcon.setFont(new Font("Tahoma", 1, 18)); // NOI18N
        houseIcon.setForeground(new Color(255, 255, 255));
        houseIcon.setIcon(new ImageIcon("image\\house1.png")); // NOI18N
        houseIcon.setText("      HOUSE");
        houseIcon.setToolTipText("check house details");

        GroupLayout bluePanelLayout = new GroupLayout(bluePanel);
        bluePanel.setLayout(bluePanelLayout);
        bluePanelLayout.setHorizontalGroup(
            bluePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(houseDetails, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(houseIcon, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bluePanelLayout.setVerticalGroup(
            bluePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(bluePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(houseIcon)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(houseDetails, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        );

        brownPanel.setBackground(new Color(51, 0, 0));
        brownPanel.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 8));

        roomIcon.setIcon(new ImageIcon("image\\room-key.png")); // NOI18N

        jLabel1.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new Color(255, 255, 255));
        jLabel1.setText("Vacant Rooms");
        jLabel1.setToolTipText("total vacant rooms");

        vacantRooms.setFont(new Font("Comic Sans MS", 3, 30)); // NOI18N
        vacantRooms.setForeground(new Color(255, 255, 255));
        vacantRooms.setToolTipText("total vacant rooms");
        vacantRooms.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                vacantRoomsMouseClicked(evt);
            }
        });

        GroupLayout brownPanelLayout = new GroupLayout(brownPanel);
        brownPanel.setLayout(brownPanelLayout);
        brownPanelLayout.setHorizontalGroup(
            brownPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(brownPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomIcon)
                .addGap(18, 18, 18)
                .addGroup(brownPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vacantRooms, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        brownPanelLayout.setVerticalGroup(
            brownPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(brownPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(brownPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(brownPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vacantRooms, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE))
                    .addComponent(roomIcon))
                .addGap(11, 15, Short.MAX_VALUE))
        );

        yellowPanel.setBackground(new Color(255, 204, 0));
        yellowPanel.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 8));

        paymentDetails.setFont(new Font("Comic Sans MS", 1, 14)); // NOI18N
        paymentDetails.setForeground(new Color(255, 255, 255));
        paymentDetails.setText("        view details");
        paymentDetails.setToolTipText("check tenant payment status");
        paymentDetails.setCursor(new Cursor(Cursor.HAND_CURSOR));
        paymentDetails.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                paymentDetailsMouseClicked(evt);
            }
        });

        paymentIcon.setFont(new Font("Tahoma", 1, 18)); // NOI18N
        paymentIcon.setForeground(new Color(255, 255, 255));
        paymentIcon.setIcon(new ImageIcon("image\\rupee1.png")); // NOI18N
        paymentIcon.setText("    PAYMENT");
        paymentIcon.setToolTipText("check tenant payment status");

        GroupLayout yellowPanelLayout = new GroupLayout(yellowPanel);
        yellowPanel.setLayout(yellowPanelLayout);
        yellowPanelLayout.setHorizontalGroup(
            yellowPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(yellowPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(paymentIcon, GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
            .addComponent(paymentDetails, GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
        );
        yellowPanelLayout.setVerticalGroup(
            yellowPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(yellowPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paymentIcon)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(paymentDetails, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        );

        pinkPanel.setBackground(new Color(255, 0, 153));
        pinkPanel.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 8));

        outstandingIcon.setIcon(new ImageIcon("image\\money1.png")); // NOI18N

        outstandingDetails.setFont(new Font("Comic Sans MS", 1, 14)); // NOI18N
        outstandingDetails.setForeground(new Color(255, 255, 255));
        outstandingDetails.setText("        view details");
        outstandingDetails.setToolTipText("tenant outstanding payment");
        outstandingDetails.setCursor(new Cursor(Cursor.HAND_CURSOR));
        outstandingDetails.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                outstandingDetailsMouseClicked(evt);
            }
        });

        outstandingLabel.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        outstandingLabel.setForeground(new Color(255, 255, 255));
        outstandingLabel.setText("OUTSTANDING");

        outstandingAmount.setFont(new Font("Comic Sans MS", 3, 22)); // NOI18N
        outstandingAmount.setForeground(new Color(255, 255, 255));

        GroupLayout pinkPanelLayout = new GroupLayout(pinkPanel);
        pinkPanel.setLayout(pinkPanelLayout);
        pinkPanelLayout.setHorizontalGroup(
            pinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pinkPanelLayout.createSequentialGroup()
                .addComponent(outstandingIcon)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(pinkPanelLayout.createSequentialGroup()
                        .addComponent(outstandingLabel)
                        .addContainerGap())
                    .addComponent(outstandingAmount, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pinkPanelLayout.createSequentialGroup()
                .addComponent(outstandingDetails, GroupLayout.PREFERRED_SIZE, 194, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pinkPanelLayout.setVerticalGroup(
            pinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pinkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(pinkPanelLayout.createSequentialGroup()
                        .addComponent(outstandingLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outstandingAmount, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                    .addComponent(outstandingIcon))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outstandingDetails, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        );

        olivePanel.setBackground(new Color(102, 102, 0));
        olivePanel.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 8));

        tenantDetails.setFont(new Font("Comic Sans MS", 1, 14)); // NOI18N
        tenantDetails.setForeground(new Color(255, 255, 255));
        tenantDetails.setText("        view details");
        tenantDetails.setToolTipText("check tenant details");
        tenantDetails.setCursor(new Cursor(Cursor.HAND_CURSOR));
        tenantDetails.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                tenantDetailsMouseClicked(evt);
            }
        });
        tenantIcon.setFont(new Font("Tahoma", 1, 18)); // NOI18N
        tenantIcon.setForeground(new Color(255, 255, 255));
        tenantIcon.setIcon(new ImageIcon("image\\family.png")); // NOI18N
        tenantIcon.setText("        TENANT");
        tenantIcon.setToolTipText("check tenant details");

        GroupLayout olivePanelLayout = new GroupLayout(olivePanel);
        olivePanel.setLayout(olivePanelLayout);
        olivePanelLayout.setHorizontalGroup(
            olivePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(tenantDetails, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tenantIcon, GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
        olivePanelLayout.setVerticalGroup(
            olivePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, olivePanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tenantIcon)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tenantDetails, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
        );

        lightPinkPanel.setBackground(new Color(255, 204, 255));

        houseLabel.setFont(new Font("Tahoma", 1, 15)); // NOI18N
        houseLabel.setForeground(new Color(0, 0, 204));
        houseLabel.setIcon(new ImageIcon("image\\home-icon-silhouette.png")); // NOI18N
        houseLabel.setText("     House");
        houseLabel.setToolTipText("house details");
        houseLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        houseLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                houseLabelMouseClicked(evt);
            }
        });

        tenantLabel.setFont(new Font("Tahoma", 1, 15)); // NOI18N
        tenantLabel.setForeground(new Color(0, 0, 204));
        tenantLabel.setIcon(new ImageIcon("image\\multiple-users-silhouette.png")); // NOI18N
        tenantLabel.setText("      Tenant");
        tenantLabel.setToolTipText("tenant details");
        tenantLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        tenantLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                tenantLabelMouseClicked(evt);
            }
        });

        paymentLabel.setFont(new Font("Tahoma", 1, 15)); // NOI18N
        paymentLabel.setForeground(new Color(0, 0, 204));
        paymentLabel.setIcon(new ImageIcon("image\\rupee (1).png")); // NOI18N
        paymentLabel.setText("     Payments");
        paymentLabel.setToolTipText("payment details");
        paymentLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        paymentLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                paymentLabelMouseClicked(evt);
            }
        });

        invoiceLabel.setFont(new Font("Tahoma", 1, 15)); // NOI18N
        invoiceLabel.setForeground(new Color(0, 0, 204));
        invoiceLabel.setIcon(new ImageIcon("image\\invoice.png")); // NOI18N
        invoiceLabel.setText("     Invoice");
        invoiceLabel.setToolTipText("tenant invoices");
        invoiceLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        invoiceLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                invoiceLabelMouseClicked(evt);
            }
        });

        GroupLayout lightPinkPanelLayout = new GroupLayout(lightPinkPanel);
        lightPinkPanel.setLayout(lightPinkPanelLayout);
        lightPinkPanelLayout.setHorizontalGroup(
            lightPinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(lightPinkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lightPinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(lightPinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(tenantLabel, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                        .addGroup(GroupLayout.Alignment.TRAILING, lightPinkPanelLayout.createSequentialGroup()
                            .addComponent(invoiceLabel, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                            .addGap(96, 96, 96)))
                    .addGroup(lightPinkPanelLayout.createSequentialGroup()
                        .addGroup(lightPinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(paymentLabel)
                            .addComponent(houseLabel, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        lightPinkPanelLayout.setVerticalGroup(
            lightPinkPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(lightPinkPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(houseLabel)
                .addGap(18, 18, 18)
                .addComponent(tenantLabel, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paymentLabel)
                .addGap(18, 18, 18)
                .addComponent(invoiceLabel)
                .addContainerGap(412, Short.MAX_VALUE))
        );

        GroupLayout homePanelLayout = new GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(localRent, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE))
                    .addComponent(lightPinkPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(bluePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(yellowPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(olivePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(pinkPanel, GroupLayout.PREFERRED_SIZE, 217, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(brownPanel, GroupLayout.PREFERRED_SIZE, 225, GroupLayout.PREFERRED_SIZE)
                            .addComponent(greenPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(149, 149, 149))
                    .addGroup(GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(homeClose, GroupLayout.Alignment.TRAILING)
                            .addGroup(GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                                .addComponent(profileFace)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33))))))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
            .addGroup(GroupLayout.Alignment.LEADING, homePanelLayout.createSequentialGroup()
                .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(localRent, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                    .addComponent(homeClose, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(homePanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(comboBox, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
                            .addComponent(profileFace, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                        .addGap(165, 165, 165)
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(greenPanel, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                            .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(bluePanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(olivePanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(62, 62, 62)
                        .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(homePanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pinkPanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(yellowPanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(brownPanel, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(104, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addComponent(lightPinkPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxActionPerformed(ActionEvent evt) {
        if (LoginForm.check == false) {
            checkLogin();
            this.dispose();
        }
        else{
            String upd = comboBox.getSelectedItem().toString();
            if ("Update System".equals(upd)) {
                Update update = new Update();
                update.setVisible(true);
                update.pack();
                update.setLocationRelativeTo(null);
            } else
                this.dispose();
        }
    }



       private void homeCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_homeCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_homeCloseActionPerformed

    private void tenantDetailsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_tenantDetailsMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            try {
                stmt = conn.createStatement();
                String sql = "Select * from tenant";
                rs = stmt.executeQuery(sql);
                Tenant ten = new Tenant();
                ten.setVisible(true);
                ten.pack();
                ten.setLocationRelativeTo(null);
                ten.jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }       // TODO add your handling code here:
        }
        this.dispose();//GEN-LAST:event_tenantDetailsMouseClicked
    }
    private void houseDetailsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_houseDetailsMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            try {
                stmt = conn.createStatement();
                String sql = "Select *from house";
                rs = stmt.executeQuery(sql);
                House hou = new House();
                hou.setVisible(true);
                hou.pack();
                hou.setLocationRelativeTo(null);
                hou.houseTable.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }// TODO add your handling code here:
        }
        this.dispose();//GEN-LAST:event_houseDetailsMouseClicked
    }
    private void invoiceDetailsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_invoiceDetailsMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            Invoice inv = new Invoice();
            inv.setVisible(true);
            inv.pack();
            inv.setLocationRelativeTo(null);
        }
        this.dispose();//GEN-LAST:event_invoiceDetailsMouseClicked
    }
    private void outstandingDetailsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_outstandingDetailsMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            try {
                stmt = conn.createStatement();
                String sql = "Select name,tenantId,roomId,outstandingAmount from tenant";
                rs = stmt.executeQuery(sql);
                Outstanding out = new Outstanding();
                out.setVisible(true);
                out.pack();
                out.setLocationRelativeTo(null);
                out.oustandingTable.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            // TODO add your handling code here:
        }
        this.dispose();//GEN-LAST:event_outstandingDetailsMouseClicked
    }
    private void paymentDetailsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_paymentDetailsMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            Payment pay = new Payment();
            pay.setVisible(true);
            pay.pack();
            pay.setLocationRelativeTo(null);
            // TODO add your handling code here:
        }
        this.dispose();
    }
    private void houseLabelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_houseLabelMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            try {
                stmt = conn.createStatement();
                String sql = "Select *from house";
                rs = stmt.executeQuery(sql);
                House hou = new House();
                hou.setVisible(true);
                hou.pack();
                hou.setLocationRelativeTo(null);
                hou.houseTable.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }// TODO add your handling code here:
        }
        this.dispose();//GEN-LAST:event_houseLabelMouseClicked
    }
    private void tenantLabelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_tenantLabelMouseClicked
        if (LoginForm.check == false)
            checkLogin();
        else {
            try {
                stmt = conn.createStatement();
                String sql = "Select * from tenant";
                rs = stmt.executeQuery(sql);
                Tenant ten = new Tenant();
                ten.setVisible(true);
                ten.pack();
                ten.setLocationRelativeTo(null);
                ten.jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }// TODO add your handling code here:
        }
        this.dispose();//GEN-LAST:event_tenantLabelMouseClicked
    }
    private void paymentLabelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_paymentLabelMouseClicked
        if (LoginForm.check == false)
            checkLogin();
         else {
            Payment pay = new Payment();
            pay.setVisible(true);
            pay.pack();
            pay.setLocationRelativeTo(null);
            pay.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// TODO add your handling code here:
        }
        this.dispose();//GEN-LAST:event_paymentLabelMouseClicked
    }
    private void vacantRoomsMouseClicked(MouseEvent evt) {//GEN-FIRST:event_paymentLabelMouseClicked
        if (LoginForm.check == false)
            checkLogin();
         else {
            Room room = new Room();
            room.setVisible(true);
            room.pack();
            room.setLocationRelativeTo(null);
            room.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        this.dispose();//GEN-LAST:event_paymentLabelMouseClicked
    }
    private void invoiceLabelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_invoiceLabelMouseClicked
        if (LoginForm.check == false)
            checkLogin();
            else {
            Invoice inv = new Invoice();
            inv.setVisible(true);
            inv.pack();
            inv.setLocationRelativeTo(null);
            inv.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
        this.dispose();
    }
    private void checkLogin(){
        LoginForm log = new LoginForm();
        log.setVisible(true);
        log.pack();
        log.setLocationRelativeTo(null);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel bluePanel;
    private JPanel brownPanel;
    private JComboBox comboBox;
    private JPanel greenPanel;
    private JButton homeClose;
    private JPanel homePanel;
    private JLabel houseDetails;
    private JLabel houseIcon;
    private JLabel houseLabel;
    private JLabel invoiceDetails;
    private JLabel invoiceIcon;
    private JLabel invoiceLabel;
    private JLabel jLabel1;
    private JPanel lightPinkPanel;
    private JPanel olivePanel;
    public JLabel outstandingAmount;
    private JLabel outstandingDetails;
    private JLabel outstandingIcon;
    private JLabel outstandingLabel;
    private JLabel paymentDetails;
    private JLabel paymentIcon;
    private JLabel paymentLabel;
    private JPanel pinkPanel;
    public  JLabel profileFace;
    private JLabel localRent;
    private JLabel roomIcon;
    private JLabel tenantDetails;
    private JLabel tenantIcon;
    private JLabel tenantLabel;
    public JLabel vacantRooms;
    private JPanel yellowPanel;
    // End of variables declaration//GEN-END:variables
}
